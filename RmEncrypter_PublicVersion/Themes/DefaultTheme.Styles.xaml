<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:RmEncrypter_PublicVersion">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DefaultTheme.Colors.xaml"/>
        <ResourceDictionary Source="DefaultTheme.Fonts.xaml"/>
        <ResourceDictionary Source="DefaultTheme.Sizes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <local:ToCenterConverter x:Key="ToCenter"/>

    <Style x:Key="SmallText" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
    </Style>

    <Style x:Key="NormalText" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}"/>
    </Style>

    <Style x:Key="Border.TopPanel" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource Border.Background.TopPanel}" />
        <Setter Property="BorderBrush" Value="{StaticResource Border.Background.TopPanel}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="2,0" />
        <Setter Property="Padding" Value="0,2" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Style.Resources>
            <Storyboard x:Key="HighLighted">
                <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                To="{StaticResource Border.BorderBrush.TopPanel.Focused.Color}"
                                Duration="0:0:0.3"/>
                <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                To="{StaticResource Border.Background.TopPanel.Focused.Color}"
                                Duration="0:0:0.3"/>
            </Storyboard>
            <Storyboard x:Key="Default">
                <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                To="{StaticResource Border.BorderBrush.TopPanel.Color}"
                                Duration="0:0:0.3"/>
                <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                To="{StaticResource Border.Background.TopPanel.Color}"
                                Duration="0:0:0.3"/>
            </Storyboard>
        </Style.Resources>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HighLighted}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource Default}"/>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsFocused" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HighLighted}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource Default}"/>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Border.StackPanel" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource StackPanel.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource StackPanel.Border}" />
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="Padding" Value="5" />
    </Style>

    <Style x:Key="Border.TextBlock" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource TextBlock.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBlock.Border}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="Padding" Value="5" />
    </Style>

    <Storyboard x:Key="AnimatedVisibility">
        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                             From="0"
                                             To="1"
                                             Duration="0:0:0.3"/>
    </Storyboard>

    <Style x:Key="Border.TextBlock.AnimatedVisibility" TargetType="{x:Type Border}" BasedOn="{StaticResource Border.TextBlock}">
        <Style.Triggers>
            <Trigger Property="Visibility" Value="{x:Static Visibility.Visible}">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource AnimatedVisibility}"/>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Border.StackPanel.AnimatedVisibility" BasedOn="{StaticResource Border.StackPanel}" TargetType="{x:Type Border}">
        <Style.Triggers>
            <Trigger Property="Visibility" Value="{x:Static Visibility.Visible}">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource AnimatedVisibility}"/>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonBase" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Button.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Border}"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Primary}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root">

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.15"/>
                                    <VisualTransition From="Pressed"/>
                                    <VisualTransition To="Pressed"/>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Normal"/>

                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="PressedElement"  
                                                         To="0" 
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="MouseOverElement"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" 
                                                         Storyboard.TargetName="MouseOverElement" 
                                                         To="0"                    
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" 
                                                         Storyboard.TargetName="NormalElement" 
                                                         To="0"                    
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="PressedElement"
                                                         To="1" 
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="NormalElement"
                                                         To="0" 
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="ContentHost"
                                                         To="0.5" 
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="DisabledElement" 
                                                         To="1"
                                                         Duration="0" />
                                        <ColorAnimation Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" 
                                                        Storyboard.TargetName="ContentHost"
                                                        To="{StaticResource Foreground.Disabled.Color}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="PressedElement"  
                                                         To="0" 
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="MouseOverElement"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>

                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="DisabledElement" 
                                Background="{StaticResource Button.Background.Disabled}" 
                                Opacity="0">
                            <Border BorderBrush="{StaticResource Button.Border.Disabled}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2" />
                        </Border>

                        <Border x:Name="NormalElement"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"/>

                        <Border x:Name="MouseOverElement"
                                Background="{StaticResource Button.Background.Focused}" 
                                BorderBrush="{StaticResource Button.Border.Focused}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" 
                                Opacity="0"/>

                        <Border x:Name="PressedElement"
                                Background="{StaticResource Button.Background.Checked}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"
                                Opacity="0">
                            <Border BorderBrush="{StaticResource Button.Border.Checked.Level0}" BorderThickness="1" CornerRadius="2">
                                <Border BorderBrush="{StaticResource Button.Border.Checked.Level1}" BorderThickness="2" CornerRadius="2">
                                    <Border BorderBrush="{StaticResource Button.Border.Checked.Level2}" BorderThickness="2" CornerRadius="2" />
                                </Border>
                            </Border>
                        </Border>

                        <ContentPresenter x:Name="ContentHost" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}" />

    <Style x:Key="Button.AnimatedVisibility" BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="Visibility" Value="{x:Static Visibility.Visible}">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource AnimatedVisibility}"/>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Focused">
                            <ColorAnimation Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"
                                            Storyboard.TargetName="ArrowDown"
                                            To="{StaticResource ComboBox.Arrow.Focused.Color}"
                                            Duration="0:0:0.2"/>

                            <ColorAnimation Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"
                                            Storyboard.TargetName="ArrowUp"
                                            To="{StaticResource ComboBox.Arrow.Focused.Color}"
                                            Duration="0:0:0.2"/>

                        </Storyboard>
                        <Storyboard x:Key="UnFocused">
                            <ColorAnimation Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"
                                            Storyboard.TargetName="ArrowDown"
                                            To="{StaticResource ComboBox.Arrow.Normal.Color}"
                                            Duration="0:0:0.2" />

                            <ColorAnimation Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)"
                                            Storyboard.TargetName="ArrowUp"
                                            To="{StaticResource ComboBox.Arrow.Normal.Color}"
                                            Duration="0:0:0.2" />

                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border Grid.ColumnSpan="2"
                            CornerRadius="2"
                            BorderThickness="{Binding BorderThickness, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}" 
                            BorderBrush="{Binding BorderBrush, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="24" />
                            </Grid.ColumnDefinitions>

                            <Border x:Name="Border" 
                                    Grid.ColumnSpan="2" 
                                    CornerRadius="2" 
                                    Background="{Binding Background, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}">
                            </Border>

                            <Grid Grid.Column="1">
                                <Path x:Name="ArrowDown" HorizontalAlignment="Center" VerticalAlignment="Center"
                                      Data="M -2 0 L 2 4 L 6 0 Z" Margin="0,8,0,0">
                                    <Path.Fill>
                                        <SolidColorBrush Color="{StaticResource ComboBox.Arrow.Normal.Color}"/>
                                    </Path.Fill>
                                </Path>

                                <Path x:Name="ArrowUp" HorizontalAlignment="Center" VerticalAlignment="Center"
                                      Data="M -2 4 L 2 0 L 6 4 Z" Margin="0,0,0,8">
                                    <Path.Fill>
                                        <SolidColorBrush Color="{StaticResource ComboBox.Arrow.Normal.Color}"/>
                                    </Path.Fill>
                                </Path>
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Focused}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource UnFocused}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{StaticResource ComboBox.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Border}"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Primary}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Focused">

                            <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource ComboBox.Border.Focused.Color}"
                                            Duration="0:0:0.2" />

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            To="{StaticResource ComboBox.Background.Focused.Level0.Color}"
                                            Duration="0:0:0.2" />

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                            To="{StaticResource ComboBox.Background.Focused.Level1.Color}"
                                            Duration="0:0:0.2" />
                        </Storyboard>

                        <Storyboard x:Key="UnFocused">

                            <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource ComboBox.Border.Normal.Color}"
                                            Duration="0:0:0.2"/>

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            To="{StaticResource ComboBox.Background.Normal.Level0.Color}"
                                            Duration="0:0:0.2"/>

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                            To="{StaticResource ComboBox.Background.Normal.Level1.Color}"
                                            Duration="0:0:0.2"/>
                        </Storyboard>

                        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
                            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
                        </ControlTemplate>
                    </ControlTemplate.Resources>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <ToggleButton Name="ToggleButton"
                                      BorderBrush="{TemplateBinding BorderBrush}" 
                                      Background="{TemplateBinding Background}" 
                                      ClickMode="Press"
                                      Focusable="False"
                                      Grid.ColumnSpan="2" 
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                      Style="{StaticResource ComboBoxToggleButton}"/>

                        <ContentPresenter Name="Content"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                          Content="{TemplateBinding SelectionBoxItem}" 
                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          IsHitTestVisible="false" Margin="{TemplateBinding Padding}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        <TextBox x:Name="PART_EditableTextBox"                
                                 Template="{StaticResource ComboBoxTextBox}" 
                                 Margin="4"
                                 HorizontalAlignment="Left" 
                                 VerticalAlignment="Center"
                                 Focusable="True"
                                 Background="Transparent"
                                 Foreground="{StaticResource Foreground.Primary}"
                                 Visibility="Hidden" 
                                 IsReadOnly="{TemplateBinding IsReadOnly}">
                        </TextBox>

                        <Popup Name="Popup" 
                               Placement="Bottom" 
                               IsOpen="{TemplateBinding IsDropDownOpen}" 
                               AllowsTransparency="True" 
                               Focusable="False"
                               PopupAnimation="Slide" >
                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True" 
                                  MinWidth="{TemplateBinding ActualWidth}" 
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">

                                <Border x:Name="DropDownBorder" 
                                        Background="{StaticResource TextBox.Background}" 
                                        BorderThickness="1.5" 
                                        CornerRadius="2" 
                                        BorderBrush="{StaticResource ComboBox.Border}"/>

                                <ScrollViewer Margin="1" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="IsTabStop" Value="False"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility"	Value="Visible"/>
                            <Setter TargetName="Content" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Focused}"/>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource UnFocused}"/>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Focused}"/>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource UnFocused}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="ComboBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Primary}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Focused">

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            Storyboard.TargetName="Border"
                                            To="{StaticResource ComboBoxItem.Border.Focused.Level0.Color}"
                                            Duration="0:0:0.1"/>

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                            Storyboard.TargetName="Border"
                                            To="{StaticResource ComboBoxItem.Border.Focused.Level1.Color}"
                                            Duration="0:0:0.1"/>

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)"
                                            Storyboard.TargetName="Border"
                                            To="{StaticResource ComboBoxItem.Border.Focused.Level0.Color}"
                                            Duration="0:0:0.1"/>
                        </Storyboard>

                        <Storyboard x:Key="UnFocused">

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"
                                            Storyboard.TargetName="Border" 
                                            To="Transparent"
                                            Duration="0:0:0.1"/>

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                            Storyboard.TargetName="Border" 
                                            To="Transparent"
                                            Duration="0:0:0.1"/>

                            <ColorAnimation Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)"
                                            Storyboard.TargetName="Border"
                                            To="Transparent"
                                            Duration="0:0:0.1"/>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border Name="Border" SnapsToDevicePixels="True" Padding="5,1">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0.5,1" EndPoint="0.5,0">
                                <GradientStop Color="Transparent" Offset="0" />
                                <GradientStop Color="Transparent" Offset="0.5" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush>
                        </Border.Background>
                        <ContentPresenter x:Name="Content" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Focused}"/>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource UnFocused}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Background="{StaticResource ContextMenu.Background}"
                            BorderBrush="{StaticResource ContextMenu.Border.Level0}"
                            BorderThickness="2"
                            CornerRadius="5">
                        <Border BorderBrush="{StaticResource ContextMenu.Border.Level1}"
                                BorderThickness="2"
                                CornerRadius="3">
                            <Border BorderBrush="{StaticResource ContextMenu.Border.Level2}"
                                    BorderThickness="2"
                                    CornerRadius="1">
                                <StackPanel IsItemsHost="True" />
                            </Border>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListBox">
        <Setter Property="Background" Value="{StaticResource ListBox.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Foreground" Value="{StaticResource ListBox.Foreground}"/>
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5">
                        <ScrollViewer Style="{DynamicResource ScrollViewerBase}">
                            <ItemsPresenter Margin="4" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListBoxItem">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                             Storyboard.TargetName="HoverRectangle"
                                             To="1"
                                             Duration="0:0:0.1"/>
                        </Storyboard>

                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                             Storyboard.TargetName="HoverRectangle"
                                             To="0"
                                             Duration="0:0:0.1"/>
                        </Storyboard>

                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                             Storyboard.TargetName="SelectRectangle"                                             
                                             To="1"
                                             Duration="0:0:0.1"/>
                        </Storyboard>

                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                             Storyboard.TargetName="SelectRectangle"                                             
                                             To="0"
                                             Duration="0:0:0.1"/>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid Background="{TemplateBinding Background}" Margin="1,1,1,1" SnapsToDevicePixels="True" x:Name="grid">
                        <Rectangle x:Name="DefaultRectangle" IsHitTestVisible="False" Fill="Transparent"/>
                        <Rectangle x:Name="HoverRectangle" RadiusX="5" RadiusY="5" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource ListBox.Background.Focused}"/>
                        <Rectangle x:Name="SelectRectangle" RadiusX="5" RadiusY="5" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource ListBox.Background.Pressed}"/>
                        <ContentPresenter Margin="3" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>

                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>

                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOff}"/>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
                            </Trigger.ExitActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Menu.Settings" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource Border.Background.TopPanel}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuItem.Settings" TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{StaticResource Foreground.Primary}"/>
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>

        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}" TargetType="{x:Type ContentControl}">
        <Border Background="{StaticResource Border.Background.TopPanel}"
                BorderBrush="{StaticResource Border.Background.TopPanel}"
                BorderThickness="4"
                CornerRadius="2">
            <ContentPresenter />
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid>
            <Rectangle Fill="{TemplateBinding Background}" />
            <ContentPresenter ContentSource="Header"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"/>
            <Grid>
                <Popup x:Name="PART_Popup"
                   AllowsTransparency="True" 
                   Focusable="False" 
                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                   Placement="Bottom"
                   PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="Slide"
                   VerticalOffset="2">
                    <Popup.HorizontalOffset>
                        <MultiBinding Converter="{StaticResource ToCenter}">
                            <Binding RelativeSource="{RelativeSource Self}" Path="PlacementTarget.ActualWidth"/>
                            <Binding ElementName="SubmenuBorder" Path="ActualWidth"/>
                        </MultiBinding>
                    </Popup.HorizontalOffset>
                    <ContentControl x:Name="SubmenuBorder" 
                                    IsTabStop="False" 
                                    Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                        <ItemsPresenter />
                    </ContentControl>
                </Popup>
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid>
            <Rectangle x:Name="BackgroundSubmenuItem" RadiusX="5" RadiusY="5" StrokeThickness="2"/>
            <Grid>
                <ContentPresenter VerticalAlignment="Center" Margin="10" ContentSource="Header" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Fill" TargetName="BackgroundSubmenuItem" Value="{StaticResource Border.Background.TopPanel.Focused}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="HeaderTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Effect" Value="{StaticResource Header.ShadowEffect}"/>
        <Setter Property="FontFamily" Value="{StaticResource HeaderFont}"/>
        <Setter Property="FontSize" Value="{StaticResource HeaderFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Header}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="GreetingsTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{StaticResource TextBlock.Foreground.TopPanel}"/>
    </Style>

    <Style x:Key="BottomPanelTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource ExtraSmallFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource TextBlock.Foreground.BottomPanel}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{StaticResource TextBox.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Border}"/>
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Primary}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid x:Name="Root">

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Normal"/>

                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="PART_ContentHost" 
                                                         To="0.5" 
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="DisabledElement" 
                                                         To="1"   
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="NormalElement" 
                                                         To="0"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="MouseOverElement" 
                                                         To="1"                                                         
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="ReadOnly"/>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="FocusedElement" 
                                                         To="1" 
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="NormalElement"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"/>

                        <Border x:Name="MouseOverElement"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource TextBox.Border.MouseOver}" 
                                BorderThickness="2"
                                CornerRadius="2" 
                                Opacity="0"/>

                        <Border x:Name="FocusedElement"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource TextBox.Border.Focused}" 
                                BorderThickness="2"
                                CornerRadius="2" 
                                Opacity="0"/>

                        <Border x:Name="DisabledElement" 
                                Background="{StaticResource Textbox.Background.Disabled}" 
                                Opacity="0">
                            <Border BorderBrush="{StaticResource TextBox.Border.Disabled}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2" />
                        </Border>

                        <Border>
                            <ScrollViewer Padding="5" x:Name="PART_ContentHost"/>
                        </Border>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarBase" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="{StaticResource ScrollBar.Background}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5">
                        <Grid x:Name="GridScrollBar" Width="16">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="16"/>
                                <RowDefinition/>
                                <RowDefinition MaxHeight="16"/>
                            </Grid.RowDefinitions>
                            <RepeatButton x:Name="PageUpButton"
                                          Grid.Row="0"
                                          Command="ScrollBar.LineUpCommand"
                                          Style="{DynamicResource RepeatButtonArrowScrollBar}"/>

                            <Track x:Name="PART_Track" Grid.Row="1" Orientation="Vertical" IsDirectionReversed="True">
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource ThumbScrollBar}" />
                                </Track.Thumb>

                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="DecreaseRepeatButton" 
                                                  Command="ScrollBar.PageUpCommand" 
                                                  Style="{DynamicResource RepeatButtonPageScrollBar}"/>
                                </Track.DecreaseRepeatButton>

                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="IncreaseRepeatButton" 
                                                  Command="ScrollBar.PageDownCommand" 
                                                  Style="{DynamicResource RepeatButtonPageScrollBar}" />
                                </Track.IncreaseRepeatButton>
                            </Track>

                            <RepeatButton x:Name="PageDownButton"
                                          Grid.Row="2"
                                          Command="ScrollBar.LineDownCommand"
                                          Style="{DynamicResource RepeatButtonArrowScrollBar}" >
                                <RepeatButton.LayoutTransform>
                                    <RotateTransform Angle="180"/>
                                </RepeatButton.LayoutTransform>
                            </RepeatButton>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="LayoutTransform" TargetName="GridScrollBar">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeatButton"/>
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeatButton"/>
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageDownButton"/>
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageUpButton"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollViewerBase" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0"
                                                Margin="{TemplateBinding Padding}"
                                                Content="{TemplateBinding Content}" 
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Column="0" Grid.Row="1"
                                   Orientation="Horizontal"
                                   AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Minimum="0" Maximum="{TemplateBinding ScrollableWidth}"
                                   Style="{StaticResource ScrollBarBase}"
                                   Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />

                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Column="1" Grid.Row="0"
                                   Orientation="Vertical"
                                   AutomationProperties.AutomationId="VerticalScrollBar"
                                   Minimum="0" Maximum="{TemplateBinding ScrollableHeight}"
                                   Style="{StaticResource ScrollBarBase}"
                                   Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                        <Border Grid.Column="1" Grid.Row="1" Background="Transparent"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonArrowScrollBar" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="16"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Polygon x:Name="RepeatButtonArrow"
                                 Points="5,0 10,10, 0,10"
                                 Stroke="{StaticResource ScrollBar.RepeatButton.Border.Normal}"
                                 Fill="{StaticResource ScrollBar.RepeatButton.Background.Normal}"
                                 HorizontalAlignment="Center"
                                 VerticalAlignment="Center"/>

                        <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="RepeatButtonArrow"
                                    Property="Fill"
                                    Value="{StaticResource ScrollBar.RepeatButton.Background.Focused}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="RepeatButtonArrow"
                                    Property="Fill"
                                    Value="{StaticResource ScrollBar.RepeatButton.Background.Pressed}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="RepeatButtonArrow"
                                    Property="Fill"
                                    Value="{StaticResource ScrollBar.RepeatButton.Background.Disabled}"/>
                            <Setter TargetName="RepeatButtonArrow"
                                    Property="Stroke"
                                    Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RepeatButtonPageScrollBar" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThumbScrollBar" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Rectangle x:Name="normal_thumb"
                                   RadiusX="5" RadiusY="5"
                                   Fill="{StaticResource ScrollBar.Thumb.Background.Normal}"
                                   Stroke="{StaticResource ScrollBar.Thumb.Border}"
                                   Width="10"/>

                        <Rectangle x:Name="focused_thumb"
                                   RadiusX="5" RadiusY="5"
                                   Fill="{StaticResource ScrollBar.Thumb.Background.Focused}"
                                   Stroke="{StaticResource ScrollBar.Thumb.Border}"
                                   Width="10" Opacity="0" />

                        <Rectangle x:Name="pressed_thumb"
                                   RadiusX="5" RadiusY="5"
                                   Fill="{StaticResource ScrollBar.Thumb.Background.Pressed}"
                                   Stroke="{StaticResource ScrollBar.Thumb.Border}"
                                   Width="10" Opacity="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1"
                                                         Storyboard.TargetName="focused_thumb"
                                                         Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                         To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1"
                                                         Storyboard.TargetName="focused_thumb"
                                                         Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                         To="0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1"
                                                         Storyboard.TargetName="pressed_thumb"
                                                         Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                         To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1"
                                                         Storyboard.TargetName="pressed_thumb"
                                                         Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                         To="0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource Separator.Background}"/>
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Height" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Height="{TemplateBinding Height}" 
                        SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxBase" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource TextBox.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Border}"/>
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Primary}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid x:Name="Root">

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Normal"/>

                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Storyboard.TargetName="PART_ContentHost"  
                                            To="0.5"
                                            Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="DisabledElement" 
                                                         To="1" 
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="NormalElement" 
                                                         To="0"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="MouseOverElement" 
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="ReadOnly"/>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="FocusedElement" 
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid"/>
                                <VisualState x:Name="InvalidFocused"/>
                                <VisualState x:Name="InvalidUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="NormalElement"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"/>

                        <Border x:Name="MouseOverElement"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource TextBox.Border.MouseOver}" 
                                BorderThickness="2"
                                CornerRadius="2" 
                                Opacity="0"/>

                        <Border x:Name="FocusedElement"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource TextBox.Border.Focused}" 
                                BorderThickness="2"
                                CornerRadius="2" 
                                Opacity="0"/>

                        <Border x:Name="DisabledElement" 
                                Background="{StaticResource Textbox.Background.Disabled}" 
                                Opacity="0">
                            <Border BorderBrush="{StaticResource TextBox.Border.Disabled}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2" />
                        </Border>

                        <Border>
                            <ScrollViewer Padding="5" x:Name="PART_ContentHost"/>
                        </Border>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxBase}"/>

    <Style x:Key="ToggleButtonBase" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToggleButton.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ToggleButton.Border}"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="FontFamily" Value="{StaticResource RegularFont}"/>
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground.Primary}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Root">

                        <VisualStateManager.VisualStateGroups>

                            <VisualStateGroup x:Name="CommonStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" />
                                    <VisualTransition From="Pressed"/>
                                    <VisualTransition To="Pressed" />
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                            Storyboard.TargetName="NormalElement"  
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="ContentHost"  
                                                         To="0.5" 
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="DisabledElement"
                                                         To="1" 
                                                         Duration="0" />
                                        <ColorAnimation Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" 
                                                        Storyboard.TargetName="ContentHost"
                                                        To="{StaticResource Foreground.Disabled.Color}" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="MouseOverElement" 
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Normal"/>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="NormalElement"
                                                         To="0"                                                           
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="CheckedElement" 
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                                <VisualState x:Name="Unchecked"/>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="MouseOverElement"
                                                         To="1"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>

                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="CheckedElement"
                                Background="{StaticResource ToggleButton.Background.Checked}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"
                                Opacity="0">
                            <Border BorderBrush="{StaticResource ToggleButton.Border.Checked.Level0}" BorderThickness="1" CornerRadius="2">
                                <Border BorderBrush="{StaticResource ToggleButton.Border.Checked.Level1}" BorderThickness="2" CornerRadius="2">
                                    <Border BorderBrush="{StaticResource ToggleButton.Border.Checked.Level2}" BorderThickness="2" CornerRadius="2" />
                                </Border>
                            </Border>
                        </Border>

                        <Border x:Name="DisabledElement" 
                                Background="{StaticResource ToggleButton.Background.Disabled}" 
                                Opacity="0">
                            <Border BorderBrush="{StaticResource ToggleButton.Border.Disabled}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2" />
                        </Border>

                        <Border x:Name="NormalElement"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"/>

                        <Border x:Name="MouseOverElement"
                                Background="{StaticResource ToggleButton.Background.Focused}" 
                                BorderBrush="{StaticResource ToggleButton.Border.Focused}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" 
                                Opacity="0"/>

                        <ContentPresenter x:Name="ContentHost" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonBase}"/>

    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource ToggleButtonBase}"/>

    <Style x:Key="Watermark" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource NormalText}">
        <Setter Property="Foreground" Value="{StaticResource Foreground.Watermark}"/>
    </Style>

    <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{StaticResource Window.Background}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}">
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>